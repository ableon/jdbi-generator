package org.jdbi.generator.templates;

import org.jdbi.generator.explorer.DBColumn;
import org.jdbi.generator.explorer.DBTable;
import org.jdbi.generator.main.Workspace;
import org.jdbi.generator.utils.Strings;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class EntityTemplate extends AbstractTemplate
{
    private static final String[] SOURCE =
    {
        "templates/entities/LombokEntity.fm",
    };

    private static final String[] TARGET =
    {
        "${ClassName}Entity.java",
    };


    public EntityTemplate(Workspace workspace, List<DBTable> tables)
    {
        super(workspace, tables);
    }


    @Override
    public String getSource(int index, DBTable dbTable)
    {
        if (bool(getWorkspace().getUseLombok()))
            return SOURCE[index];
        else
            return SOURCE[index].replace("Lombok", "");
    }


    @Override
    public String getTarget(int index, DBTable dbTable)
    {
        String className = Strings.toClassName( dbTable.getName() );
        return getWorkspace().getEntitiesDir() + TARGET[index].replace("${ClassName}", className);
    }


    @Override
    protected void preMapping(StringBuilder template)
    {
    }


    @Override
    public Map<String, Object> getMapping(int index, DBTable dbTable)
    {
        Map<String, Object> map = new HashMap<>();

        String quoteId = workspace.getDbConnection().getQuoteId();

        String tableName  = dbTable.isQuoted() ? (quoteId + dbTable.getName() + quoteId) : dbTable.getName();
        String className  = Strings.toClassName( dbTable.getName() );
        String objectName = Strings.toPropertyName( dbTable.getName() );

        List<FieldData> fieldDataList = new ArrayList<>();
        List<FieldData> pkFieldDataList = new ArrayList<>();
        List<FieldData> generatedKeyDataList = new ArrayList<>();
        List<String> importList = new ArrayList<>();

        for (DBColumn dbColumn : dbTable.getColumnList())
        {
            FieldData fieldData = new FieldData();

            String columnName = dbColumn.isQuoted() ? (quoteId + dbColumn.getName() + quoteId) : dbColumn.getName();

            fieldData.setName( columnName );
            fieldData.setColumn( Strings.toColumnName(dbColumn.getName()) );
            fieldData.setProperty( Strings.toPropertyName(dbColumn.getName()) );
            fieldData.setType( super.getNormalizedType(dbColumn.getClassName(), importList) );
            fieldData.setEncrypted( dbColumn.isEncrypted() );
            fieldData.setInvisible( dbColumn.isInvisible() );
            fieldData.setComment( super.getColumnComment(dbColumn) );

            fieldDataList.add( fieldData );

            if (dbColumn.isPrimaryKey())
                pkFieldDataList.add( fieldData );

            if (super.isAutoGenerated(dbColumn))
                generatedKeyDataList.add( fieldData );
        }

        map.put("EntitiesPackage", getWorkspace().getEntitiesPackage());
        map.put("TableName", tableName);
        map.put("Entity", className+"Entity");
        map.put("entity", objectName+"Entity");
        map.put("importList", importList);
        map.put("fieldDataList", fieldDataList);
        map.put("pkFieldDataList", pkFieldDataList);
        map.put("generatedKeyDataList", generatedKeyDataList);
        map.put("isMultipleKey", (super.getSize(pkFieldDataList) > 1));
        map.put("isMultipleGeneratedKey", (super.getSize(generatedKeyDataList) > 1));
        map.put("builder", bool(getWorkspace().getDtoBuilders()));

        return map;
    }


    @Override
    public void generate() throws Exception
    {
        for (int index=0; index<SOURCE.length; index++)
            for (DBTable table : getTables())
                super.generate(index, table);
    }

}

