package org.jdbi.generator.templates;

import org.jdbi.generator.main.Workspace;
import org.jdbi.generator.explorer.DBColumn;
import org.jdbi.generator.explorer.DBConnection;
import org.jdbi.generator.explorer.DBTable;
import org.jdbi.generator.utils.Strings;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class TestCrudDaoTemplate extends AbstractTemplate
{
    private static final String[] SOURCE =
    {
        "templates/testing/dao/crud/CrudDaoTest.fm",
    };

    private static final String[] TARGET =
    {
        "${ClassName}CrudDaoTest.java",
    };


    public TestCrudDaoTemplate(Workspace workspace, List<DBTable> tables)
    {
        super(workspace, tables);
    }


    @Override
    public String getSource(int index, DBTable dbTable)
    {
        return SOURCE[index];
    }


    @Override
    public String getTarget(int index, DBTable dbTable)
    {
        String className = Strings.toClassName( dbTable.getName() );
        return getWorkspace().getTestCrudDaoDir() + TARGET[index].replace("${ClassName}", className);
    }


    @Override
    protected void preMapping(StringBuilder template)
    {

    }


    @Override
    public Map<String, Object> getMapping(int index, DBTable dbTable)
    {
        Map<String, Object> map = new HashMap<>();

        String className  = Strings.toClassName( dbTable.getName() );
        String objectName = Strings.toPropertyName( dbTable.getName() );

        List<FieldData> fieldDataList = new ArrayList<>();
        List<FieldData> filterDataList = new ArrayList<>();
        List<FieldData> pkFieldDataList = new ArrayList<>();
        List<FieldData> generatedKeyDataList = new ArrayList<>();

        for (DBColumn dbColumn : dbTable.getColumnList())
        {
            FieldData fieldData = new FieldData();

            fieldData.setName( dbColumn.getName() );
            fieldData.setColumn( Strings.toColumnName(dbColumn.getName()) );
            fieldData.setProperty( Strings.toPropertyName(dbColumn.getName()) );
            fieldData.setType( super.getNormalizedType(dbColumn.getClassName(), null) );
            fieldData.setEncrypted( dbColumn.isEncrypted() );

            // DataTestFactory
            if (dbColumn.getClassName().equals(DBConnection.BYTE_ARRAY_CLASS_NAME))
                fieldData.setType("ByteArray");
            else
            if (dbColumn.getClassName().equals(java.sql.Date.class.getName()))
                fieldData.setType("SqlDate");
            else
            if (dbColumn.isJson() || dbColumn.isJsonB())
                fieldData.setType("Json");
            // DataTestFactory

            // filter
            if (super.isFilterType(dbColumn))
                filterDataList.add( fieldData );
            // filter

            fieldDataList.add( fieldData );

            if (dbColumn.isPrimaryKey())
                pkFieldDataList.add( fieldData );

            if (super.isAutoGenerated(dbColumn))
                generatedKeyDataList.add( fieldData );
        }

        String key = (pkFieldDataList.size() > 1)
                        ? (className+"Entity.Key")
                        : pkFieldDataList.get(0).getType();

        String generatedKey = "Void";
        boolean isGeneratedKey = super.isNotEmpty(generatedKeyDataList);

        if (isGeneratedKey)
        {
            generatedKey = (generatedKeyDataList.size() > 1)
                            ? (className+"Entity.GeneratedKey")
                            : generatedKeyDataList.get(0).getType();
        }

        map.put("TestCrudDaoPackage", getWorkspace().getTestCrudDaoPackage());
        map.put("TestAbstractDaoPackage", getWorkspace().getTestAbstractDaoPackage());
        map.put("AbstractDaoPackage", getWorkspace().getAbstractDaoPackage());
        map.put("CrudDaoPackage", getWorkspace().getCrudDaoPackage());
        map.put("EntitiesPackage", getWorkspace().getEntitiesPackage());
        map.put("ConfigPackage", getWorkspace().getConfigPackage());
        map.put("DataSourceClassName", Strings.toClassName( getWorkspace().getDataSourceName() ));
        map.put("ClassName", className);
        map.put("CrudDao", className+"CrudDao");
        map.put("crudDao", objectName+"CrudDao");
        map.put("Key", key);
        map.put("GeneratedKey", generatedKey);
        map.put("isGeneratedKey", isGeneratedKey);
        map.put("Entity", className+"Entity");
        map.put("fieldDataList", fieldDataList);
        map.put("filterDataList", filterDataList);
        map.put("pkFieldDataList", pkFieldDataList);
        map.put("isMultipleKey", super.getSize(pkFieldDataList) > 1);
        map.put("generatedKeyDataList", generatedKeyDataList);
        map.put("isMultipleGeneratedKey", super.getSize(generatedKeyDataList) > 1);
        map.put("spring", getWorkspace().isSpring());
        map.put("jta", bool(getWorkspace().getJta()));

        return map;
    }


    @Override
    public void generate() throws Exception
    {
        for (int index=0; index<SOURCE.length; index++)
            for (DBTable table : getTables())
                super.generate(index, table);
    }

}

