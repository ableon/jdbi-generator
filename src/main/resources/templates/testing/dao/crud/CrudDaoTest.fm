package ${TestCrudDaoPackage};

import javax.sql.DataSource;
import java.util.List;
import ${ConfigPackage}.${DataSourceClassName}DataSourceConfig;
import ${TestAbstractDaoPackage}.AbstractDaoTest;
import ${TestAbstractDaoPackage}.DataTestFactory;
import ${AbstractDaoPackage}.SqlOptions;
import ${CrudDaoPackage}.${CrudDao};
import ${EntitiesPackage}.${Entity};
import org.junit.jupiter.api.Test;
<#if spring>
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.annotation.Rollback;
import org.springframework.transaction.annotation.Transactional;
</#if>


<#if spring>
@Transactional<#if !jta>(transactionManager = ${DataSourceClassName}DataSourceConfig.TRANSACTION_MANAGER)</#if>
@Rollback(true)
</#if>
public class ${CrudDao}Test extends AbstractDaoTest
{
    <#if spring>@Autowired @Qualifier(${DataSourceClassName}DataSourceConfig.DATASOURCE)</#if>
    private DataSource dataSource;

	<#if spring>@Autowired</#if>
    private ${CrudDao} ${crudDao};


    public ${CrudDao}Test()
    {
        super();
        super.disableConstraints( ${Entity}.TABLE_NAME );
    }


    @Override
    protected DataSource getDataSource()
    {
        return dataSource;
    }


    protected ${CrudDao} get${CrudDao}()
    {
        return ${crudDao};
    }


    protected ${Key} getKey()
    {
        <#if isMultipleKey>
        ${Key} key = new ${Key}();

        <#list pkFieldDataList as pkFieldData>
        key.${pkFieldData.setter}( DataTestFactory.get${pkFieldData.type}() );
        </#list>

        return key;
        <#else>
        <#list pkFieldDataList as pkFieldData>
        return DataTestFactory.get${pkFieldData.type}();
        </#list>
        </#if>
    }


    protected ${Entity} getEntity()
    {
        ${Entity} entity = new ${Entity}();

        <#list fieldDataList as fieldData>
        entity.${fieldData.setter}( DataTestFactory.get${fieldData.type}() );
        </#list>

        return entity;
    }


    protected ${Entity} getFilter()
    {
        ${Entity} entity = new ${Entity}();

        <#list filterDataList as filterData>
        entity.${filterData.setter}( DataTestFactory.get${filterData.type}() );
        </#list>

        return entity;
    }


    @Test
    public void countList() throws Exception
    {
        logger.info("countList");

        ${Entity} filter = getFilter();

        int result = get${CrudDao}().countList( filter );

        logger.info("result: " + result);
    }


    @Test
    public void countFind() throws Exception
    {
        logger.info("countFind");

        ${Entity} filter = getFilter();

        int result = get${CrudDao}().countFind( filter );

        logger.info("result: " + result);
    }


    @Test
    public void countAll() throws Exception
    {
        logger.info("countAll");
        
        int result = get${CrudDao}().countAll();

        logger.info("result: " + result);
    }


    @Test
    public void existsById() throws Exception
    {
        logger.info("existsById");

        ${Key} id = getKey();

        boolean result = get${CrudDao}().existsById( id );

        logger.info("result: " + result);
    }


    @Test
    public void exists() throws Exception
    {
        logger.info("exists");

        ${Entity} filter = getFilter();

        boolean result = get${CrudDao}().exists( filter );

        logger.info("result: " + result);
    }


    @Test
    public void getId() throws Exception
    {
        logger.info("getId");

        ${Entity} filter = getFilter();

        ${Key} result = get${CrudDao}().getId( filter );

        logger.info("result: " + result);
    }


    @Test
    public void getIds() throws Exception
    {
        logger.info("getIds");

        ${Entity} filter = getFilter();

        List<${Key}> result = get${CrudDao}().getIds( filter );

        logger.info("result: " + result);
    }


    @Test
    public void findIds() throws Exception
    {
        logger.info("findIds");

        ${Entity} filter = getFilter();

        List<${Key}> result = get${CrudDao}().findIds( filter );

        logger.info("result: " + result);
    }


    @Test
    public void getAllIds() throws Exception
    {
        logger.info("getAllIds");

        SqlOptions sqlOptions = SqlOptions.builder().offset(0).limit(10).build();

        List<${Key}> result = get${CrudDao}().getAllIds( sqlOptions );

        logger.info("result: " + result);
    }


    @Test
    public void getById() throws Exception
    {
        logger.info("getById");

        ${Key} id = getKey();

        ${Entity} result = get${CrudDao}().getById( id );

        logger.info("result: " + result);
    }


    @Test
    public void get() throws Exception
    {
        logger.info("get");

        ${Entity} filter = getFilter();

        ${Entity} result = get${CrudDao}().get( filter );

        logger.info("result: " + result);
    }


    @Test
    public void getList() throws Exception
    {
        logger.info("getList");

        ${Entity} filter = getFilter();

        List<${Entity}> result = get${CrudDao}().getList( filter );

        logger.info("result: " + result);
    }


    @Test
    public void findList() throws Exception
    {
        logger.info("findList");

        ${Entity} filter = getFilter();

        List<${Entity}> result = get${CrudDao}().findList( filter );

        logger.info("result: " + result);
    }


    @Test
    public void getAll() throws Exception
    {
        logger.info("getAll");

        SqlOptions sqlOptions = SqlOptions.builder().offset(0).limit(10).build();
        
        List<${Entity}> result = get${CrudDao}().getAll( sqlOptions );

        logger.info("result: " + result);
    }


    @Test
    public void create() throws Exception
    {
        logger.info("create");
        
        ${Entity} entity = getEntity();
        <#list generatedKeyDataList as generatedKeyData>
        entity.${generatedKeyData.setter}(null); // generated key
        </#list>

        get${CrudDao}().create( entity );

        logger.info("result: " + entity);
    }


    @Test
    public void updateById() throws Exception
    {
        logger.info("updateById");

        ${Entity} entity = getEntity();
        
        int result = get${CrudDao}().updateById( entity );

        logger.info("result: " + result);
    }


    @Test
    public void modifyById() throws Exception
    {
        logger.info("modifyById");

        ${Entity} entity = getEntity();

        int result = get${CrudDao}().modifyById( entity );

        logger.info("result: " + result);
    }


    @Test
    public void updateMany() throws Exception
    {
        logger.info("updateMany");

        ${Entity} entity = getEntity();
        ${Entity} filter = getFilter();

        int result = get${CrudDao}().updateMany(entity, filter);

        logger.info("result: " + result);
    }


    @Test
    public void modifyMany() throws Exception
    {
        logger.info("modifyMany");

        ${Entity} entity = getEntity();
        ${Entity} filter = getFilter();

        int result = get${CrudDao}().modifyMany(entity, filter);

        logger.info("result: " + result);
    }


    @Test
    public void deleteById() throws Exception
    {
        logger.info("deleteById");

        ${Key} id = getKey();
        
        int result = get${CrudDao}().deleteById( id );

        logger.info("result: " + result);
    }


    @Test
    public void deleteMany() throws Exception
    {
        logger.info("deleteMany");

        ${Entity} filter = getFilter();
        
        int result = get${CrudDao}().deleteMany( filter );

        logger.info("result: " + result);
    }


    @Test
    public void deleteAll() throws Exception
    {
        logger.info("deleteAll");
        
        int result = get${CrudDao}().deleteAll();

        logger.info("result: " + result);
    }

}

