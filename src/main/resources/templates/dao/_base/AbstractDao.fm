package ${BaseDaoPackage};

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Array;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;


public abstract class AbstractDao
{
    protected Logger logger = LoggerFactory.getLogger( getClass() );

    protected final Map<String, Object> EMPTY_MAP = new HashMap<>();


    protected AbstractDao() {}


    public Logger getLogger() { return logger; }


    private StringBuilder getParamsBuffer(String methodName, Object... params)
    {
        StringBuilder buffer = new StringBuilder( methodName );

        buffer.append("(");

        if (params != null)
        {
            for (int i=0; i<params.length; i++)
            {
                if (i > 0)
                    buffer.append(",");

                if (params[i] != null && params[i].getClass() == byte[].class)
                    buffer.append("ByteArray[").append(Array.getLength(params[i])).append("]");
                else
                if (params[i] != null && params[i].getClass() == String.class)
                    buffer.append('\"').append(params[i]).append('\"');
                else
                    buffer.append(params[i]);
            }
        }

        buffer.append(")");

        return buffer;
    }


    protected void debug(String methodName, Object... params)
    {
        if (logger.isDebugEnabled())
            logger.debug( getParamsBuffer(methodName, params).toString() );
    }


    protected void debug(String msg, int value)
    {
        if (logger.isDebugEnabled())
            logger.debug("{}: {}", msg, value);
    }


    protected boolean isEmpty(Map<?, ?> map)
    {
        return (map == null || map.isEmpty());
    }


    protected boolean isEmpty(Collection<?> collection)
    {
        return (collection == null || collection.isEmpty());
    }


    protected Map<String, Object> getOptions(SqlOptions sqlOptions)
    {
        return (sqlOptions != null) ? sqlOptions.toMap() : EMPTY_MAP;
    }


    protected Map<String, Object> getOptions(SqlOptions sqlOptions, int limitByDefault)
    {
        if (sqlOptions == null)
            sqlOptions = SqlOptions.builder().build();

        if (sqlOptions.getLimit() == null)
            sqlOptions.setLimit( limitByDefault );

        return getOptions( sqlOptions );
    }

}

